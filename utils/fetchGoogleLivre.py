#!/usr/bin/env python3
"""
fetchGoogleLivre.py

Script pour extraire les informations des 10000 romans les plus r√©cents 
depuis l'API Google Books et les sauvegarder en JSON.
"""

import requests
import json
import time
from datetime import datetime, timedelta
import os
from urllib.parse import quote

# -------- Configuration --------
OUTPUT_FILE = "dbase/google_books_romans.json"
MAX_BOOKS = 10000  # Nombre maximum de livres √† extraire
BATCH_SIZE = 40    # Nombre de livres par requ√™te API (max 40 pour Google Books)
DELAY = 1          # D√©lai entre les requ√™tes (en secondes)
API_KEY = ""       # Optionnel: cl√© API Google Books pour plus de requ√™tes

# Cat√©gories de fiction/romans en fran√ßais et anglais
FICTION_CATEGORIES = [
    "fiction",
    "roman", 
    "novel",
    "literature",
    "litt√©rature",
    "fantasy",
    "science fiction",
    "mystery",
    "thriller",
    "romance",
    "adventure",
    "historical fiction",
    "contemporary fiction",
    "literary fiction"
]

# Langues √† inclure
LANGUAGES = ["fr"]

def get_google_books_api_url(query, start_index=0, max_results=40, order_by="newest"):
    """
    Construit l'URL pour l'API Google Books
    
    Args:
        query (str): Requ√™te de recherche
        start_index (int): Index de d√©part pour la pagination
        max_results (int): Nombre maximum de r√©sultats (max 40)
        order_by (str): Ordre de tri ('relevance' ou 'newest')
    
    Returns:
        str: URL de l'API Google Books
    """
    base_url = "https://www.googleapis.com/books/v1/volumes"
    
    # Construire la requ√™te avec filtres
    encoded_query = quote(query)
    url = f"{base_url}?q={encoded_query}&orderBy={order_by}&maxResults={max_results}&startIndex={start_index}"
    
    # Ajouter la cl√© API si disponible
    if API_KEY:
        url += f"&key={API_KEY}"
    
    return url

def extract_book_info(book_item):
    """
    Extrait les informations d'un livre depuis la r√©ponse de l'API Google Books
    
    Args:
        book_item (dict): Item de livre de l'API Google Books
        
    Returns:
        dict: Informations format√©es du livre
    """
    volume_info = book_item.get("volumeInfo", {})
    
    # Informations de base
    title = volume_info.get("title", "Titre inconnu")
    authors = volume_info.get("authors", ["Auteur inconnu"])
    author = ", ".join(authors) if isinstance(authors, list) else str(authors)
    
    # Description/r√©sum√©
    description = volume_info.get("description", "")
    if len(description) > 1000:  # Limiter la longueur
        description = description[:1000] + "..."
    
    # Informations de publication
    publisher = volume_info.get("publisher", "√âditeur inconnu")
    published_date = volume_info.get("publishedDate", "Date inconnue")
    
    # D√©tails du livre
    page_count = volume_info.get("pageCount", 0)
    language = volume_info.get("language", "")
    
    # Cat√©gories
    categories = volume_info.get("categories", [])
    category = ", ".join(categories) if categories else "Fiction"
    
    # ISBN et identifiants
    industry_identifiers = volume_info.get("industryIdentifiers", [])
    isbn = ""
    for identifier in industry_identifiers:
        if identifier.get("type") in ["ISBN_13", "ISBN_10"]:
            isbn = identifier.get("identifier", "")
            break
    
    # Image de couverture
    image_links = volume_info.get("imageLinks", {})
    cover_url = (image_links.get("thumbnail") or 
                image_links.get("smallThumbnail") or 
                image_links.get("small") or "")
    
    # Lien vers Google Books
    google_link = volume_info.get("infoLink", "")
    
    # G√©n√©rer un ID unique
    book_id = book_item.get("id", f"google_book_{hash(title + author)}")
    
    return {
        "id": book_id,
        "titre": title,
        "auteur": author,
        "resume": description,
        "editeur": publisher,
        "parution": published_date,
        "pages": str(page_count) if page_count > 0 else "Inconnu",
        "langue": language,
        "categorie": category,
        "isbn": isbn,
        "couverture": cover_url,
        "lien": google_link,
        "source": "Google Books API"
    }

def search_books_by_query(query, max_books_per_query=1000):
    """
    Recherche des livres pour une requ√™te sp√©cifique
    
    Args:
        query (str): Requ√™te de recherche
        max_books_per_query (int): Nombre maximum de livres √† extraire pour cette requ√™te
        
    Returns:
        list: Liste des livres trouv√©s
    """
    books = []
    start_index = 0
    
    print(f"üîç Recherche: {query}")
    
    while len(books) < max_books_per_query:
        try:
            # Calculer le nombre de r√©sultats √† demander
            remaining = max_books_per_query - len(books)
            max_results = min(BATCH_SIZE, remaining)
            
            # Construire l'URL de l'API
            url = get_google_books_api_url(query, start_index, max_results)
            
            # Faire la requ√™te
            print(f"   üì° Requ√™te API: index {start_index}, r√©sultats {max_results}")
            response = requests.get(url, timeout=30)
            
            if response.status_code != 200:
                print(f"   ‚ùå Erreur API: {response.status_code}")
                if response.status_code == 429:  # Rate limit
                    print("   ‚è≥ Rate limit atteint, attente 60 secondes...")
                    time.sleep(60)
                    continue
                else:
                    break
            
            data = response.json()
            items = data.get("items", [])
            
            if not items:
                print(f"   ‚úÖ Aucun livre suppl√©mentaire trouv√©")
                break
            
            # Traiter chaque livre
            for item in items:
                try:
                    book_info = extract_book_info(item)
                    
                    # Filtrer les livres (optionnel: v√©rifier si c'est vraiment de la fiction)
                    if is_fiction_book(book_info):
                        books.append(book_info)
                        
                        if len(books) % 100 == 0:
                            print(f"   üìö {len(books)} livres extraits...")
                            
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  Erreur extraction livre: {e}")
                    continue
            
            start_index += len(items)
            
            # Respecter les limites de l'API
            time.sleep(DELAY)
            
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå Erreur r√©seau: {e}")
            time.sleep(5)
            continue
        except Exception as e:
            print(f"   ‚ùå Erreur inattendue: {e}")
            break
    
    print(f"   ‚úÖ {len(books)} livres trouv√©s pour '{query}'")
    return books

def is_fiction_book(book_info):
    """
    V√©rifie si un livre est probablement de la fiction
    
    Args:
        book_info (dict): Informations du livre
        
    Returns:
        bool: True si le livre semble √™tre de la fiction
    """
    # V√©rifier les cat√©gories
    category = book_info.get("categorie", "").lower()
    fiction_keywords = [
        "fiction", "novel", "roman", "litt√©rature", "literature",
        "fantasy", "science fiction", "mystery", "thriller", "romance",
        "adventure", "historical fiction", "contemporary fiction"
    ]
    
    # V√©rifier si une des cat√©gories contient des mots-cl√©s de fiction
    for keyword in fiction_keywords:
        if keyword in category:
            return True
    
    # V√©rifier dans le titre et la description (plus conservateur)
    title = book_info.get("titre", "").lower()
    description = book_info.get("resume", "").lower()
    
    # Exclure les livres non-fiction √©vidents
    non_fiction_keywords = [
        "cookbook", "manual", "guide", "handbook", "textbook",
        "biography", "autobiography", "memoir", "histoire vraie",
        "self-help", "how to", "comment faire"
    ]
    
    for keyword in non_fiction_keywords:
        if keyword in title or keyword in description:
            return False
    
    return True

def save_books_to_json(books, filename):
    """
    Sauvegarde la liste des livres en format JSON
    
    Args:
        books (list): Liste des livres
        filename (str): Nom du fichier de sortie
    """
    # Cr√©er le r√©pertoire si n√©cessaire
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    
    # Sauvegarder en JSON avec formatage
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(books, f, ensure_ascii=False, indent=2)
    
    print(f"üìÅ {len(books)} livres sauvegard√©s dans {filename}")

def main():
    """
    Fonction principale pour extraire les romans depuis Google Books API
    """
    print("üöÄ D√©but de l'extraction des romans depuis Google Books API")
    print(f"üéØ Objectif: {MAX_BOOKS} livres maximum")
    print(f"üìÅ Fichier de sortie: {OUTPUT_FILE}")
    print("-" * 60)
    
    all_books = []
    books_per_category = MAX_BOOKS // len(FICTION_CATEGORIES)
    
    try:
        for i, category in enumerate(FICTION_CATEGORIES):
            print(f"\nüìñ Cat√©gorie {i+1}/{len(FICTION_CATEGORIES)}: {category}")
            
            # Construire des requ√™tes pour diff√©rentes langues
            for lang in LANGUAGES:
                if len(all_books) >= MAX_BOOKS:
                    break
                    
                # Construire la requ√™te avec filtres
                query = f"subject:{category} language:{lang}"
                
                # Calculer combien de livres extraire pour cette requ√™te
                remaining_books = MAX_BOOKS - len(all_books)
                max_books_this_query = min(books_per_category // len(LANGUAGES), remaining_books)
                
                if max_books_this_query <= 0:
                    break
                
                # Rechercher les livres
                category_books = search_books_by_query(query, max_books_this_query)
                
                # √âviter les doublons (bas√© sur titre + auteur)
                existing_keys = {(book['titre'], book['auteur']) for book in all_books}
                new_books = [book for book in category_books 
                           if (book['titre'], book['auteur']) not in existing_keys]
                
                all_books.extend(new_books)
                print(f"   ‚ûï {len(new_books)} nouveaux livres ajout√©s (total: {len(all_books)})")
                
                # Sauvegarder p√©riodiquement
                if len(all_books) % 500 == 0:
                    print(f"üíæ Sauvegarde interm√©diaire: {len(all_books)} livres")
                    save_books_to_json(all_books, OUTPUT_FILE.replace('.json', '_temp.json'))
            
            if len(all_books) >= MAX_BOOKS:
                print(f"üéØ Objectif atteint: {len(all_books)} livres extraits")
                break
    
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Extraction interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
    
    finally:
        # Sauvegarder les r√©sultats finaux
        if all_books:
            save_books_to_json(all_books, OUTPUT_FILE)
            
            # Supprimer le fichier temporaire s'il existe
            temp_file = OUTPUT_FILE.replace('.json', '_temp.json')
            if os.path.exists(temp_file):
                os.remove(temp_file)
                
            print(f"\n‚úÖ Extraction termin√©e!")
            print(f"üìö Total de livres extraits: {len(all_books)}")
            print(f"üìÅ Fichier de sortie: {OUTPUT_FILE}")
            print(f"üïê Temps d'ex√©cution: {datetime.now()}")
        else:
            print("\n‚ùå Aucun livre extrait")

if __name__ == "__main__":
    main()